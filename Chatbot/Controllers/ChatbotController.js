// Controllers/ChatbotController.js
const dotenv = require("dotenv");
const { GoogleGenAI } = require("@google/genai");
const VectorStore = require("../models/VectorStore");
const Product = require("../models/Product");
const Order = require("../models/Order");
const cosineSim = require("../utils/cosineSim");
const Redis = require("ioredis");

dotenv.config();

// ====== ENV ======
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
if (!GEMINI_API_KEY) console.error("‚ö†Ô∏è GEMINI_API_KEY ch∆∞a thi·∫øt l·∫≠p!");

const REDIS_URL = process.env.REDIS_URL;
if (!REDIS_URL) console.error("‚ö†Ô∏è REDIS_URL ch∆∞a thi·∫øt l·∫≠p!");

// ====== Redis Connection ======
const redis = new Redis(REDIS_URL, { tls: { rejectUnauthorized: false } });
redis.on("connect", () => console.log("‚úÖ Redis connected"));
redis.on("error", (err) => console.error("‚ùå Redis error:", err));

// ====== Gemini Models ======
const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });
const chatModelName = "gemini-2.0-flash";
const embeddingModelName = "gemini-embedding-001";

// ====== Helpers ======
function normalizeText(text) {
  if (!text) return "";
  return text.toLowerCase().trim().replace(/\s+/g, " ");
}

async function createEmbedding(text) {
  if (!text) return [];
  try {
    const res = await ai.models.embedContent({
      model: embeddingModelName,
      contents: [text],
    });
    return res.embeddings?.[0]?.values || [];
  } catch (err) {
    console.error("‚ùå Embedding error:", err);
    return [];
  }
}

// ====== Retrieve top-K Products ======
async function retrieveTopKProducts(queryVector, k = 5) {
  if (!queryVector || queryVector.length === 0) return [];

  let docs = await VectorStore.find({ type: "product" });
  docs = docs.map((d) => ({ ...d._doc, score: cosineSim(queryVector, d.vector || []) }));
  const topK = docs.sort((a, b) => b.score - a.score).slice(0, k);

  // fallback n·∫øu score qu√° th·∫•p
  if (topK.every((d) => d.score < 0.2)) {
    const allProducts = await Product.find({ isActive: true });
    const directMatch = allProducts.filter((p) =>
      normalizeText(p.name).includes(normalizeText(queryVector.join(" ")))
    );
    if (directMatch.length > 0) return directMatch.map((p) => ({ metadata: p, vector: [] }));
  }

  return topK.map((d) => d);
}

// ====== Detect Intent ======
function isProductIntent(message) {
  const keywords = [
    "t√¨m", "xem", "mua", "iphone", "ƒëi·ªán tho·∫°i", "laptop",
    "tai nghe", "macbook", "truy·ªán", "s√°ch",
  ];
  return keywords.some((k) => message.toLowerCase().includes(k));
}

// ====== Redis Chat History ======
async function saveChatHistory(userId, role, message) {
  if (!userId) return;
  const key = `chat:${userId}`;
  await redis.rpush(key, JSON.stringify({ role, message }));
  const length = await redis.llen(key);
  if (length > 15) await redis.lpop(key);
}

async function getChatHistory(userId) {
  if (!userId) return [];
  const key = `chat:${userId}`;
  const history = await redis.lrange(key, 0, -1);
  return history.map((msg) => JSON.parse(msg));
}

// ====== Main Controller ======
async function chatWithGemini(req, res) {
  const { message, userId } = req.body;
  if (!message) return res.status(400).json({ reply: "Thi·∫øu message!" });

  let action = "chat";
  if (isProductIntent(message)) action = "find_product";
  if (userId && message.toLowerCase().includes("ƒë∆°n h√†ng")) action = "check_order";

  try {
    const history = await getChatHistory(userId);
    const historyText = history.map((h) => `${h.role === "user" ? "üë§" : "ü§ñ"} ${h.message}`).join("\n");
    let reply = "M√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n!";

    switch (action) {
      // --- FIND PRODUCT ---
      case "find_product": {
        const queryVector = await createEmbedding(message);
        const topProducts = await retrieveTopKProducts(queryVector, 5);

        const dataText = topProducts
          .map((p) => `‚Ä¢ ${p.metadata.name} (Brand: ${p.metadata.brand || "N/A"}, Category: ${p.metadata.category || "N/A"})`)
          .join("\n");

        const prompt = `
B·∫°n l√† chatbot e-commerce. 
L·ªãch s·ª≠ tr√≤ chuy·ªán:
${historyText || "(Kh√¥ng c√≥ tin nh·∫Øn tr∆∞·ªõc ƒë√≥)"}

D·ªØ li·ªáu s·∫£n ph·∫©m:
${dataText || "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p."}

Ng∆∞·ªùi d√πng h·ªèi: "${message}"
H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, t·∫≠p trung v√†o g·ª£i √Ω s·∫£n ph·∫©m.
        `;

        const chatRes = await ai.models.generateContent({
          model: chatModelName,
          contents: prompt,
          config: { temperature: 0.2 },
        });

        reply = chatRes.text || reply;

        if (userId) {
          await saveChatHistory(userId, "user", message);
          await saveChatHistory(userId, "bot", reply);
        }

        return res.json({
          reply,
          products: topProducts.map((p) => p.metadata.name),
        });
      }

      // --- CHECK ORDERS ---
      case "check_order": {
        if (!userId) {
          reply = "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem tr·∫°ng th√°i ƒë∆°n h√†ng.";
          return res.json({ reply, orders: [] });
        }

        const orders = await Order.find({ userId }).sort({ createdAt: -1 }).limit(5);

        if (!orders.length) {
          reply = "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.";
        } else {
          reply = "C√°c ƒë∆°n h√†ng g·∫ßn ƒë√¢y c·ªßa b·∫°n:\n" + orders
            .map((o) => `‚Ä¢ M√£: ${o._id}, Tr·∫°ng th√°i: ${o.status}, Ng√†y: ${o.createdAt.toLocaleString()}`)
            .join("\n");
        }

        await saveChatHistory(userId, "user", message);
        await saveChatHistory(userId, "bot", reply);

        return res.json({ reply, orders });
      }

      // --- DEFAULT CHAT ---
      default: {
        const prompt = `
B·∫°n l√† chatbot e-commerce th√¢n thi·ªán.
L·ªãch s·ª≠ tr√≤ chuy·ªán:
${historyText || "(Kh√¥ng c√≥ l·ªãch s·ª≠ tr∆∞·ªõc ƒë√≥)"}

Ng∆∞·ªùi d√πng v·ª´a n√≥i: "${message}"
H√£y ph·∫£n h·ªìi t·ª± nhi√™n, ng·∫Øn g·ªçn, th√¢n thi·ªán.
        `;

        const chatRes = await ai.models.generateContent({
          model: chatModelName,
          contents: prompt,
          config: { temperature: 0.3 },
        });

        reply = chatRes.text || reply;

        if (userId) {
          await saveChatHistory(userId, "user", message);
          await saveChatHistory(userId, "bot", reply);
        }

        return res.json({ reply });
      }
    }
  } catch (err) {
    console.error("‚ùå Chatbot error:", err);
    return res.json({ reply: "C√≥ l·ªói x·∫£y ra, th·ª≠ l·∫°i sau nh√©!" });
  }
}

module.exports = { chatWithGemini };
