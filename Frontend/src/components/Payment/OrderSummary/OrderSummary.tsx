import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Subtotal from "./Subtotal";
import CartDiscount from "./CartDiscount";
import ShippingFee from "./ShippingFee";
import TotalAmount from "./TotalAmount";

interface CartResponse {
  subtotal: number;
  shippingFee: number;
  total?: number;
}

interface OrderSummaryProps {
  shippingFee: number;
  paymentMethod: "cod" | "momo" | "vnpay";
  addressId: string | null;
  discount: number;
  voucherCode?: string;
}

interface AddressType {
  _id: string;
  fullName: string;
  phone: string;
  street: string;
  city: string;
  country?: string;
}

const OrderSummary: React.FC<OrderSummaryProps> = ({
  shippingFee,
  paymentMethod,
  addressId,
  discount,
  voucherCode,
}) => {
  const [cart, setCart] = useState<CartResponse | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedAddress, setSelectedAddress] = useState<AddressType | null>(null);
  const [selectedCartSubtotal, setSelectedCartSubtotal] = useState<number>(0); // ‚úÖ Subtotal c√°c s·∫£n ph·∫©m ch·ªçn
  const token = localStorage.getItem("token");
  const navigate = useNavigate();

  // üì¶ L·∫•y gi·ªè h√†ng ƒë·∫ßy ƒë·ªß
  useEffect(() => {
    if (!token) {
      setLoading(false);
      return;
    }
    const fetchCart = async () => {
      try {
        const res = await fetch("http://localhost:5000/api/cart", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const data = await res.json();
        if (!res.ok) throw new Error(data.message || "Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng");
        setCart({
          subtotal: data.subtotal ?? 0,
          shippingFee: data.shippingFee ?? 0,
          total: data.subtotal ?? 0,
        });
      } catch {
        setCart(null);
      } finally {
        setLoading(false);
      }
    };
    fetchCart();
  }, [token]);

  // üì¶ L·∫•y subtotal c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
  useEffect(() => {
    if (!token) return;

    const fetchSelectedSubtotal = async () => {
      try {
        const saved = localStorage.getItem("checkoutItems");
        const selectedIds: string[] = saved ? JSON.parse(saved) : [];

        const res = await fetch("http://localhost:5000/api/cart", {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y gi·ªè h√†ng");

        const data = await res.json();
        const subtotal = data.items
          .filter((item: any) => selectedIds.includes(item._id))
          .reduce((sum: number, item: any) => sum + item.subtotal, 0);

        setSelectedCartSubtotal(subtotal);
      } catch (err) {
        console.error(err);
        setSelectedCartSubtotal(0);
      }
    };

    fetchSelectedSubtotal();
  }, [token]);

  // üì¶ L·∫•y ƒë·ªãa ch·ªâ
  useEffect(() => {
    if (!addressId || !token) {
      setSelectedAddress(null);
      return;
    }
    const fetchAddress = async () => {
      try {
        const res = await fetch(`http://localhost:5000/api/address/${addressId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const data = await res.json();
        if (!res.ok) throw new Error(data.message || "Kh√¥ng th·ªÉ t·∫£i ƒë·ªãa ch·ªâ");
        setSelectedAddress(data);
      } catch {
        setSelectedAddress(null);
      }
    };
    fetchAddress();
  }, [addressId, token]);

  const total = selectedCartSubtotal - discount + shippingFee;

  // ‚úÖ FIX: Th√™m selectedItems t·ª´ localStorage
  const handleCheckout = async () => {
    if (!token) return alert("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
    if (!selectedAddress) return alert("Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng!");

    const selectedItemsSaved = localStorage.getItem("checkoutItems");
    const selectedItems = selectedItemsSaved ? JSON.parse(selectedItemsSaved) : [];
    if (!selectedItems.length) return alert("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ thanh to√°n");

    try {
      const orderPayload = {
        shippingAddress: {
          fullName: selectedAddress.fullName,
          phone: selectedAddress.phone,
          address: `${selectedAddress.street}, ${selectedAddress.city}, ${selectedAddress.country || ""}`,
        },
        paymentMethod,
        shippingFee,
        voucherCode,
        note: "Giao h√†ng nhanh gi√∫p m√¨nh",
        selectedItems, // ‚úÖ G·ª≠i danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
      };

      const orderRes = await fetch("http://localhost:5000/api/orders", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(orderPayload),
      });

      const orderData = await orderRes.json();
      if (!orderRes.ok) throw new Error(orderData.message || "L·ªói t·∫°o ƒë∆°n h√†ng");

      localStorage.setItem("lastOrderId", orderData.order._id);
      localStorage.setItem("lastOrderCode", orderData.order.orderCode);

      // ‚úÖ X√≥a checkoutItems sau khi thanh to√°n
      localStorage.removeItem("checkoutItems");

      if (paymentMethod === "momo") {
        const payRes = await fetch("http://localhost:5000/api/payment/momo", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({
            amount: orderData.order.total,
            orderInfo: `Thanh to√°n ƒë∆°n h√†ng #${orderData.order.orderCode}`,
            orderCode: orderData.order.orderCode,
          }),
        });

        const payData = await payRes.json();
        if (!payRes.ok || !payData.payUrl) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c payUrl t·ª´ MoMo");

        window.location.href = payData.payUrl;
        return;
      }

      if (paymentMethod === "vnpay") {
        alert("Ch·ª©c nƒÉng thanh to√°n VNPay ƒëang ph√°t tri·ªÉn!");
        return;
      }

      alert("T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!");
      navigate(`/order/${orderData.order._id}`);
    } catch (err) {
      alert(err instanceof Error ? err.message : "C√≥ l·ªói x·∫£y ra khi thanh to√°n");
    }
  };

  if (loading) return <div>ƒêang t·∫£i t√≥m t·∫Øt ƒë∆°n h√†ng...</div>;
  if (!cart) return <div>Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu gi·ªè h√†ng</div>;

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="font-semibold text-lg mb-4">T√≥m t·∫Øt ƒë∆°n h√†ng</div>
      {/* ‚úÖ Subtotal ch·ªâ t√≠nh c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn */}
      <Subtotal subtotal={selectedCartSubtotal} />
      {/* ‚úÖ Voucher gi·∫£m gi√° */}
      {discount > 0 && <CartDiscount voucherDiscount={discount} />}
      <ShippingFee shippingFee={shippingFee} />
      <TotalAmount total={total} />
      <button
        onClick={handleCheckout}
        className="w-full mt-6 bg-blue-600 text-white py-3 rounded font-semibold text-lg hover:bg-blue-700 transition"
      >
        Thanh to√°n
      </button>
    </div>
  );
};

export default OrderSummary;
