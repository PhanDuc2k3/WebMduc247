import React, { useEffect, useState } from "react";

interface CartResponse {
  subtotal: number;
  discount: number;
}

interface OrderSummaryProps {
  shippingFee: number;
}

const OrderSummary: React.FC<OrderSummaryProps> = ({ shippingFee }) => {
  const [cart, setCart] = useState<CartResponse | null>(null);
  const [loading, setLoading] = useState(true);
  const [voucher, setVoucher] = useState<{ voucherId: string | null; discount: number }>({
    voucherId: null,
    discount: 0,
  });

  const token = localStorage.getItem("token");

  useEffect(() => {
    // L·∫•y voucher t·ª´ localStorage
    const savedVoucher = localStorage.getItem("appliedVoucher");
    if (savedVoucher) {
      try {
        const parsed = JSON.parse(savedVoucher);
        setVoucher({
          voucherId: parsed.voucherId ?? null,
          discount: parsed.discount ?? 0,
        });
        console.log("üéüÔ∏è Voucher l·∫•y t·ª´ localStorage:", parsed);
      } catch (err) {
        console.error("üî• L·ªói khi parse voucher t·ª´ localStorage:", err);
      }
    }

    if (!token) {
      console.warn("‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng th·ªÉ l·∫•y gi·ªè h√†ng!");
      setLoading(false);
      return;
    }

    const fetchCart = async () => {
      try {
        console.log("üëâ G·ªçi API gi·ªè h√†ng ƒë·ªÉ l·∫•y t√≥m t·∫Øt ƒë∆°n h√†ng...");

        const res = await fetch("http://localhost:5000/api/cart", {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        });

        if (!res.ok) {
          const errorText = await res.text();
          throw new Error(`‚ùå API Error ${res.status}: ${errorText}`);
        }

        const data = await res.json();
        console.log("‚úÖ D·ªØ li·ªáu gi·ªè h√†ng:", data);

        setCart({
          subtotal: data.subtotal ?? 0,
          discount: data.discount ?? 0,
        });
      } catch (err) {
        console.error("üî• L·ªói khi fetch gi·ªè h√†ng:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchCart();
  }, [token]);

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow p-6 text-gray-500">
        ƒêang t·∫£i t√≥m t·∫Øt ƒë∆°n h√†ng...
      </div>
    );
  }

  if (!cart) {
    return (
      <div className="bg-white rounded-lg shadow p-6 text-red-500">
        Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu gi·ªè h√†ng
      </div>
    );
  }

  // √Åp d·ª•ng c·∫£ discount t·ª´ gi·ªè h√†ng v√† t·ª´ voucher
  const { subtotal, discount: cartDiscount } = cart;
  const totalDiscount = cartDiscount + (voucher.discount || 0);
  const total = subtotal - totalDiscount + shippingFee;

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="font-semibold text-lg mb-4">T√≥m t·∫Øt ƒë∆°n h√†ng</div>

      <div className="flex justify-between text-gray-700 mb-2">
        <span>T·∫°m t√≠nh</span>
        <span className="font-medium">{subtotal.toLocaleString("vi-VN")}‚Ç´</span>
      </div>

      <div className="flex justify-between text-gray-700 mb-2">
        <span>Gi·∫£m gi√° (gi·ªè h√†ng)</span>
        <span className="text-red-500 font-medium">
          -{cartDiscount.toLocaleString("vi-VN")}‚Ç´
        </span>
      </div>

      {voucher.discount > 0 && (
        <div className="flex justify-between text-gray-700 mb-2">
          <span>
            Gi·∫£m gi√° Voucher {voucher.voucherId ? `(${voucher.voucherId})` : ""}
          </span>
          <span className="text-red-500 font-medium">
            -{voucher.discount.toLocaleString("vi-VN")}‚Ç´
          </span>
        </div>
      )}

      <div className="flex justify-between text-gray-700 mb-4">
        <span>Ph√≠ v·∫≠n chuy·ªÉn</span>
        <span className="text-green-600 font-medium">
          {shippingFee > 0
            ? `${shippingFee.toLocaleString("vi-VN")}‚Ç´`
            : "Mi·ªÖn ph√≠"}
        </span>
      </div>

      <div className="border-t pt-4 flex justify-between items-center text-lg font-bold">
        <span>T·ªïng c·ªông</span>
        <span className="text-red-500">{total.toLocaleString("vi-VN")}‚Ç´</span>
      </div>

      <button className="w-full mt-6 bg-blue-600 text-white py-3 rounded font-semibold text-lg hover:bg-blue-700 transition">
        Thanh to√°n
      </button>
    </div>
  );
};

export default OrderSummary;
