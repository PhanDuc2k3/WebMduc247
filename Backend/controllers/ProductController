  const Product = require('../models/Product');
  const Store = require('../models/Store');

  // Hàm sinh SKU tự động
  const generateSKU = (name) => {
    const timestamp = Date.now();
    const shortName = name && name.trim() ? name.toUpperCase().replace(/\s+/g, '-') : 'PROD';
    return `${shortName}-${timestamp}`;
  };

  // ================== CREATE PRODUCT ==================
  exports.createProduct = async (req, res) => {
    try {
const userId = req.user.userId; // lấy đúng trường từ token
console.log("2 [CREATE PRODUCT] UserId từ token:", userId);


      // Tìm store theo owner
const store = await Store.findOne({ owner: userId });
console.log("👉 Store tìm theo owner:", store);

      if (!store) {
        return res.status(400).json({
          success: false,
          message: "❌ Không tìm thấy cửa hàng của bạn. Vui lòng tạo cửa hàng trước.",
        });
      }

      const {
        name,
        description,
        price,
        salePrice,
        brand,
        category,
        subCategory,
        quantity,
        model,
        sku,
        variations,
        specifications,
        seoTitle,
        seoDescription,
        keywords,
        tags,
      } = req.body;

      // Parse các field dạng JSON string
      const parsedVariations =
        variations && typeof variations === "string"
          ? JSON.parse(variations)
          : variations || [];

      const parsedSpecifications =
        specifications && typeof specifications === "string"
          ? JSON.parse(specifications)
          : specifications || [];

      const parsedTags =
        tags && typeof tags === "string" ? JSON.parse(tags) : tags || [];

      const parsedKeywords =
        keywords && typeof keywords === "string"
          ? JSON.parse(keywords)
          : keywords || [];

      // Xử lý ảnh nếu có
      let images = [];
      if (req.files && req.files.length > 0) {
        images = req.files.map((file) => `/uploads/${file.filename}`);
      }

      // Nếu sku chưa có → tự tạo
      const finalSKU = sku || generateSKU(name);

      // Tạo product
      const product = new Product({
        name,
        description,
        price,
        salePrice,
        brand,
        category,
        subCategory,
        quantity,
        model,
        sku: generateSKU(name), // ✅ tự sinh nếu không có
        variations: parsedVariations,
        specifications: parsedSpecifications,
        seoTitle,
        seoDescription,
        keywords: parsedKeywords,
        tags: parsedTags,
        store: store._id,
        images,
      });

      console.log("📌 Product chuẩn bị lưu:", product);

      await product.save();
      console.log("✅ Product đã lưu thành công!");

      return res.status(201).json({ success: true, data: product });
    } catch (err) {
      console.error("❌ Lỗi tạo sản phẩm:", err);
      return res.status(400).json({ success: false, message: err.message });
    }
  };




// ================== GET ALL PRODUCTS ==================
exports.getProducts = async (req, res) => {
  try {
    const { category, search, sortBy, limit = 10, page = 1 } = req.query;
    const filter = { isActive: true };

    if (category) filter.category = category;
    if (search) filter.name = { $regex: search, $options: "i" };

    const skip = (page - 1) * limit;

    let query = Product.find(filter)
      .populate("store", "name logoUrl")
      .skip(Number(skip))
      .limit(Number(limit));

    // Sort: price_asc, price_desc, rating, newest
    if (sortBy) {
      if (sortBy === "price_asc") query = query.sort({ price: 1 });
      if (sortBy === "price_desc") query = query.sort({ price: -1 });
      if (sortBy === "rating") query = query.sort({ rating: -1 });
      if (sortBy === "newest") query = query.sort({ createdAt: -1 });
    }

    const products = await query;
    const total = await Product.countDocuments(filter);

    res.json({
      success: true,
      data: products,
      pagination: {
        total,
        page: Number(page),
        pages: Math.ceil(total / limit),
      },
    });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

// ================== GET PRODUCT DETAIL ==================
exports.getProductById = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id).populate(
      "store",
      "name logoUrl"
    );
    if (!product)
      return res
        .status(404)
        .json({ success: false, message: "Product not found" });

    // tăng lượt xem
    product.viewsCount += 1;
    await product.save();

    res.json({ success: true, data: product });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

// ================== UPDATE PRODUCT ==================
exports.updateProduct = async (req, res) => {
  try {
    let updateData = { ...req.body };

    // Parse JSON fields
    if (updateData.variations && typeof updateData.variations === "string") {
      updateData.variations = JSON.parse(updateData.variations);
    }
    if (updateData.specifications && typeof updateData.specifications === "string") {
      updateData.specifications = JSON.parse(updateData.specifications);
    }
    if (updateData.tags && typeof updateData.tags === "string") {
      updateData.tags = JSON.parse(updateData.tags);
    }
    if (updateData.keywords && typeof updateData.keywords === "string") {
      updateData.keywords = JSON.parse(updateData.keywords);
    }

    // Cập nhật images nếu có file upload
    if (req.files && req.files.length > 0) {
      updateData.images = req.files.map((file) => `/uploads/${file.filename}`);
    }

    const product = await Product.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true, runValidators: true }
    );

    if (!product) {
      return res
        .status(404)
        .json({ success: false, message: "Product not found" });
    }

    res.json({ success: true, data: product });
  } catch (err) {
    res.status(400).json({ success: false, message: err.message });
  }
};

// ================== DELETE PRODUCT (SOFT DELETE) ==================
exports.deleteProduct = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product)
      return res
        .status(404)
        .json({ success: false, message: "Product not found" });

    product.isActive = false;
    await product.save();

    res.json({ success: true, message: "Product deactivated" });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};
