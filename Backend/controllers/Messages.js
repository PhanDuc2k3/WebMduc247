const Conversation = require("../models/Conversation");
const Message = require("../models/Message");
const User = require("../models/Users");

/**
 * üü¢ T·∫°o ho·∫∑c l·∫•y conversation gi·ªØa 2 user
 * POST /api/messages/conversation
 */
exports.getOrCreateConversation = async (req, res) => {
  try {
    console.log("üî• [BE] API POST /conversation ƒë∆∞·ª£c g·ªçi");
    console.log("üì© [BE] Body nh·∫≠n ƒë∆∞·ª£c:", req.body);

    const { senderId, receiverId } = req.body;

    if (!senderId || !receiverId) {
      console.warn("‚ö†Ô∏è [BE] Thi·∫øu senderId ho·∫∑c receiverId");
      return res.status(400).json({ message: "Thi·∫øu senderId ho·∫∑c receiverId" });
    }

    // Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    const sender = await User.findById(senderId);
    const receiver = await User.findById(receiverId);

    console.log("üîé [BE] senderId:", senderId, "->", sender ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y");
    console.log("üîé [BE] receiverId:", receiverId, "->", receiver ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y");

    if (!sender || !receiver) {
      console.warn("‚ö†Ô∏è [BE] Kh√¥ng t√¨m th·∫•y user");
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // T√¨m conversation c≈©
    let conversation = await Conversation.findOne({
      participants: { $all: [senderId, receiverId] },
    });

    if (!conversation) {
      console.log("üì¶ [BE] Kh√¥ng c√≥ conversation -> t·∫°o m·ªõi");
      conversation = await Conversation.create({
        participants: [senderId, receiverId],
      });
      console.log("‚úÖ [BE] T·∫°o conversation m·ªõi:", conversation._id);
    } else {
      console.log("üì¶ [BE] Conversation ƒë√£ t·ªìn t·∫°i:", conversation._id);
    }

    res.status(200).json(conversation);
  } catch (err) {
    console.error("‚ùå [BE] L·ªói getOrCreateConversation:", err);
    res.status(500).json({ message: "L·ªói t·∫°o/l·∫•y conversation", error: err.message });
  }
};


/**
 * üü¢ G·ª≠i tin nh·∫Øn
 * POST /api/messages/send
 */
// N·∫øu b·∫°n v·∫´n d√πng API g·ª≠i message
exports.sendMessage = async (req, res) => {
  try {
    const { conversationId, sender, text, attachments } = req.body;
    if (!conversationId || !sender || (!text && !attachments)) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu g·ª≠i tin nh·∫Øn" });
    }

    const message = await Message.create({ conversationId, sender, text, attachments });
    await Conversation.findByIdAndUpdate(conversationId, {
      lastMessage: text || "[ƒê√≠nh k√®m]",
      updatedAt: new Date(),
    });

    res.status(201).json(message);
  } catch (err) {
    res.status(500).json({ message: "L·ªói g·ª≠i tin nh·∫Øn", error: err.message });
  }
};

/**
 * üü¢ L·∫•y t·∫•t c·∫£ tin nh·∫Øn trong 1 conversation
 * GET /api/messages/:conversationId
 */
exports.getMessages = async (req, res) => {
  try {
    const { conversationId } = req.params;
    console.log("üì• [getMessages] conversationId:", conversationId);

    if (!conversationId) {
      console.warn("‚ö†Ô∏è Thi·∫øu conversationId");
      return res.status(400).json({ message: "Thi·∫øu conversationId" });
    }

    const messages = await Message.find({ conversationId }).sort({ createdAt: 1 });
    console.log(`‚úÖ ƒê√£ l·∫•y ${messages.length} message`);

    res.status(200).json(messages);
  } catch (err) {
    console.error("‚ùå L·ªói getMessages:", err);
    res.status(500).json({ message: "L·ªói l·∫•y tin nh·∫Øn", error: err.message });
  }
};

/**
 * üü¢ L·∫•y danh s√°ch h·ªôi tho·∫°i c·ªßa user
 * GET /api/messages/conversations/:userId
 */
exports.getUserConversations = async (req, res) => {
  try {
    const { userId } = req.params;
    console.log("üì• [getUserConversations] userId:", userId);

    if (!userId) {
      console.warn("‚ö†Ô∏è Thi·∫øu userId");
      return res.status(400).json({ message: "Thi·∫øu userId" });
    }

    const conversations = await Conversation.find({
      participants: userId,
    })
      .sort({ updatedAt: -1 })
      .populate("participants", "fullName avatarUrl _id")
      .lean();

    console.log(`‚úÖ ƒê√£ t√¨m th·∫•y ${conversations.length} conversation`);

    const formattedConversations = conversations.map((conv) => {
      const otherUser = conv.participants.find((p) => p._id.toString() !== userId);
      return {
        conversationId: conv._id,
        lastMessage: conv.lastMessage,
        name: otherUser?.fullName || "Ng∆∞·ªùi d√πng",
        avatarUrl: otherUser?.avatarUrl || "",
      };
    });

    console.log("üì§ K·∫øt qu·∫£ tr·∫£ v·ªÅ:", formattedConversations);

    res.status(200).json(formattedConversations);
  } catch (err) {
    console.error("‚ùå L·ªói getUserConversations:", err);
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch h·ªôi tho·∫°i", error: err.message });
  }
};
