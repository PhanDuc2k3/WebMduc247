const User = require('../models/Users');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const Store = require('../models/Store');

// ==========================
// ƒêƒÇNG K√ù
// ==========================
exports.register = async (req, res) => {
  try {
    const { email, password, fullName, phone } = req.body;
    if (!email || !password || !fullName)
      return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin' });

    const existingUser = await User.findOne({ email });
    if (existingUser)
      return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ email, password: hashedPassword, fullName, phone });
    await newUser.save();

    res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng' });
  } catch (error) {
    console.error('Register error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// ==========================
// ƒêƒÇNG NH·∫¨P
// ==========================

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password)
      return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u' });

    const user = await User.findOne({ email });
    if (!user)
      return res.status(400).json({ message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid)
      return res.status(400).json({ message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });

    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET || 'secret123',
      { expiresIn: '7d' }
    );

    // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i online khi login
    await User.findByIdAndUpdate(user._id, { online: true, lastSeen: new Date() });

    res.status(200).json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      token,
      user: {
        id: user._id,
        email: user.email,
        fullName: user.fullName,
        phone: user.phone,
        role: user.role,
        avatarUrl: user.avatarUrl || '',
        online: true,        // tr·∫£ lu√¥n tr·∫°ng th√°i cho client
        lastSeen: new Date()
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// ==========================
// ƒêƒÇNG XU·∫§T
// ==========================
exports.logout = async (req, res) => {
  try {
    const userId = req.user.userId;
    await User.findByIdAndUpdate(userId, { online: false, lastSeen: new Date() });
    res.status(200).json({ message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' });
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// ==========================
// L·∫§Y TH√îNG TIN NG∆Ø·ªúI D√ôNG
// ==========================
exports.getProfile = async (req, res) => {
  try {
    const userId = req.user.userId;
    const user = await User.findById(userId).select('-password');
    if (!user) return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });

    let store = null;
    if (user.role === 'seller') {
      store = await Store.findOne({ owner: user._id });
    }

    res.status(200).json({ message: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng', user, store });
  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// ==========================
// C·∫¨P NH·∫¨T TH√îNG TIN NG∆Ø·ªúI D√ôNG
// ==========================
exports.updateProfile = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { fullName, phone } = req.body;

    let updateData = { fullName, phone };

    // N·∫øu c√≥ file upload avatar t·ª´ Cloudinary
    if (req.file) {
      updateData.avatarUrl = req.file.path; // req.file.path l√† URL Cloudinary
    }

    const user = await User.findByIdAndUpdate(userId, updateData, {
      new: true,
      runValidators: true,
    }).select('-password');

    if (!user)
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng', user });
  } catch (error) {
    console.error('Update profile error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};


// ==========================
// QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG (ADMIN)
// ==========================
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select('-password');
    res.status(200).json({ message: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng', users });
  } catch (error) {
    console.error('Get all users error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

exports.deleteUser = async (req, res) => {
  try {
    const userId = req.params.id;
    const user = await User.findByIdAndDelete(userId);
    if (!user) return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    res.status(200).json({ message: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    console.error('Delete user error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

exports.updateUser = async (req, res) => {
  try {
    const userId = req.params.id;
    const { role, status } = req.body;
    const user = await User.findByIdAndUpdate(
      userId,
      { role, 'sellerRequest.status': status },
      { new: true, runValidators: true }
    ).select('-password');

    if (!user) return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    res.status(200).json({ message: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng', user });
  } catch (error) {
    console.error('Update user error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// ==========================
// Y√äU C·∫¶U M·ªû C·ª¨A H√ÄNG
// ==========================

exports.requestSeller = async (req, res) => {
  try {
    const userId = req.user?.userId;
    if (!userId) return res.status(401).json({ message: "Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c ng∆∞·ªùi d√πng" });

    const { name, description, storeAddress, category, contactPhone, contactEmail } = req.body;

    // Check c√°c field b·∫Øt bu·ªôc
    const missingFields = [];
    if (!name) missingFields.push("name");
    if (!storeAddress) missingFields.push("storeAddress");
    if (!category) missingFields.push("category");
    if (!contactPhone) missingFields.push("contactPhone");

    if (missingFields.length > 0)
      return res.status(400).json({ message: `Thi·∫øu th√¥ng tin: ${missingFields.join(", ")}` });

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    if (user.sellerRequest?.status === "pending")
      return res.status(400).json({ message: "ƒê√£ g·ª≠i y√™u c·∫ßu, vui l√≤ng ch·ªù admin duy·ªát" });

    // L·∫•y URL t·ª´ Cloudinary
    const logoUrl = req.files?.logo?.[0]?.path || null;
    const bannerUrl = req.files?.banner?.[0]?.path || null;

    user.sellerRequest = {
      status: "pending",
      requestedAt: new Date(),
      store: {
        name,
        description,
        category,
        storeAddress,
        contactPhone,
        contactEmail,
        logoUrl,
        bannerUrl,
        isActive: false,
      },
    };

    await user.save();

    res.status(200).json({
      message: "ƒê√£ g·ª≠i y√™u c·∫ßu m·ªü c·ª≠a h√†ng",
      sellerRequest: user.sellerRequest,
    });
  } catch (error) {
    console.error("requestSeller error:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};



exports.getAllSellerRequests = async (req, res) => {
  try {
    const requests = await User.find({ 'sellerRequest.status': 'pending' }).select('fullName email phone sellerRequest');
    res.status(200).json({ message: 'Danh s√°ch y√™u c·∫ßu m·ªü c·ª≠a h√†ng', requests });
  } catch (error) {
    console.error('Get seller requests error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

exports.handleSellerRequest = async (req, res) => {
  try {
    const { userId, action } = req.body;

    if (!userId || !['approve', 'reject'].includes(action)) {
      return res.status(400).json({ message: 'Thi·∫øu userId ho·∫∑c action kh√¥ng h·ª£p l·ªá' });
    }

    // L·∫•y user
    const user = await User.findById(userId);
    if (!user || !user.sellerRequest) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu c·ªßa user n√†y' });
    }

    if (user.sellerRequest.status !== 'pending') {
      return res.status(400).json({ message: 'Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥' });
    }

if (action === 'approve') {
  // C·∫≠p nh·∫≠t status
  user.sellerRequest.status = 'approved';
  user.sellerRequest.processedAt = new Date();

  // ƒê·ªïi role
  user.role = 'seller';

  // T·∫°o store m·ªõi
  const { name, description, category, storeAddress, contactPhone, contactEmail, logoUrl, bannerUrl } = user.sellerRequest.store;

  const newStore = new Store({
    owner: user._id,
    name,
    description,
    category,
    storeAddress,
    contactPhone,
    contactEmail,
    logoUrl,
    bannerUrl,
    isActive: true,
  });

  await newStore.save();
  await user.save();

  return res.status(200).json({ message: 'ƒê√£ duy·ªát y√™u c·∫ßu, t·∫°o c·ª≠a h√†ng v√† chuy·ªÉn role sang seller', store: newStore });
}


    if (action === 'reject') {
      user.sellerRequest.status = 'rejected';
      user.sellerRequest.processedAt = new Date();

      await user.save();

      return res.status(200).json({ message: 'ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu m·ªü c·ª≠a h√†ng' });
    }

  } catch (error) {
    console.error('Handle seller request error:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

