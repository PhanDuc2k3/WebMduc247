require('dotenv').config();
const mongoose = require('mongoose');
const connectDB = require('../config/db'); // file k·∫øt n·ªëi MongoDB c·ªßa b·∫°n
const { GoogleGenAI } = require('@google/genai');

const Product = require('../models/Product');
const VectorStore = require('../models/VectorStore');

// --- Kh·ªüi t·∫°o Gemini AI ---
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
if (!GEMINI_API_KEY) {
  console.error('‚ùå GEMINI_API_KEY ch∆∞a thi·∫øt l·∫≠p trong .env');
  process.exit(1);
}

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });
const embeddingModel = 'gemini-embedding-001'; // model embedding

// --- H√†m normalize text ---
function normalizeText(text) {
  if (!text) return '';
  return text.toLowerCase().trim().replace(/\s+/g, ' ');
}

/**
 * T·∫°o embedding cho text
 * @param {string} text
 * @returns {Promise<number[]>}
 */
async function createEmbedding(text) {
  if (!text) return [];
  try {
    const res = await ai.models.embedContent({
      model: embeddingModel,
      contents: [text]
    });
    return res.embeddings?.[0]?.values || [];
  } catch (err) {
    console.error('‚ùå Embedding failed:', err.message || err);
    return [];
  }
}

async function main() {
  try {
    await connectDB();
    console.log('‚úÖ MongoDB connected');

    const products = await Product.find({ isActive: true });
    console.log(`üîπ Found ${products.length} active products`);

    for (const p of products) {
      // --- Normalize t·∫•t c·∫£ text tr∆∞·ªõc khi t·∫°o embedding ---
      const text = normalizeText([
        p.name,
        p.description,
        p.category,
        p.brand,
        ...(p.tags || []),
        ...(p.keywords?.flat() || [])
      ].join(' '));

      console.log(`[DEBUG] Creating embedding for product: ${p.name}`);

      const vector = await createEmbedding(text);
      if (!vector || vector.length === 0) {
        console.warn(`‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c embedding cho product ${p.name}`);
        continue;
      }

      await VectorStore.findOneAndUpdate(
        { docId: p._id },
        {
          docId: p._id,
          type: 'product',
          vector,
          metadata: {
            name: p.name,
            category: p.category,
            brand: p.brand,
            tags: p.tags,
            keywords: p.keywords
          }
        },
        { upsert: true }
      );

      console.log(`‚úÖ Product "${p.name}" ƒë√£ t·∫°o embedding`);
    }

    console.log('üéâ Ho√†n t·∫•t t·∫°o embedding cho t·∫•t c·∫£ s·∫£n ph·∫©m!');
  } catch (err) {
    console.error('‚ùå Script error:', err);
  } finally {
    await mongoose.connection.close();
    console.log('‚úÖ MongoDB connection closed');
  }
}

main();
